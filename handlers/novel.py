import structlog
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from services.novel import NovelService
from filters.chat_type import ChatTypeFilter
from filters.referral import RegularStartCommandFilter
from keyboards.menu import get_main_menu
from .base import PermissionMixin

logger = structlog.get_logger()

router = Router(name="novel")
router.message.filter(ChatTypeFilter(["private"]))

PRIORITIES = {
    "COMMAND": 5,
    "MENU": 4,
    "CALLBACK": 3,
    "TEXT": 1
}

MENU_COMMANDS = {
    "üéÆ –ù–æ–≤–µ–ª–ª–∞",
    "üîÑ –†–µ—Å—Ç–∞—Ä—Ç",
    "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
}

class NovelHandlers(PermissionMixin):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–æ–≤–µ–ª–ª—ã"""
    
    def __init__(self, novel_service: NovelService):
        self.novel_service = novel_service
    
    async def start_novel(self, message: Message, l10n) -> None:
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–µ–ª–ª—ã"""
        user_id = message.from_user.id
        logger.info(f"Starting novel for user {user_id}")
        
        try:
            novel_state = await self.novel_service.create_novel_state(user_id)
            if not novel_state:
                await message.answer(
                    l10n.format_value("novel-payment-required"),
                    reply_markup=get_main_menu(has_active_novel=False)
                )
                return
            
            await message.answer(
                l10n.format_value("novel-started"),
                reply_markup=get_main_menu(has_active_novel=True)
            )
            loading_message = await message.answer("‚åõÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
            
            await self.novel_service.process_message(
                message=message,
                novel_state=novel_state,
                initial_message=True
            )
            await loading_message.delete()
            
        except Exception as e:
            logger.error(f"Error starting novel: {e}", exc_info=True)
            await message.answer(l10n.format_value("novel-error"))
    
    async def handle_message(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–æ–≤–µ–ª–ª–µ"""
        try:
            novel_state = await self.novel_service.get_novel_state(message.from_user.id)
            if not novel_state:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã. –ù–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                    reply_markup=get_main_menu(has_active_novel=False)
                )
                return
                
            await self.novel_service.process_message(
                message=message,
                novel_state=novel_state,
                initial_message=False
            )
        except Exception as e:
            logger.error(f"Error handling message: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
novel_handlers = NovelHandlers(novel_service=None)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ DI

@router.message(Command("start"), RegularStartCommandFilter())
async def cmd_start(message: Message, novel_service: NovelService, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start"""
    global novel_handlers
    novel_handlers = NovelHandlers(novel_service)
    
    is_admin, is_owner = await novel_handlers.check_permissions(message)
    if not (is_admin or is_owner):
        if not await novel_handlers.check_subscription(message, l10n):
            return
    
    await novel_handlers.start_novel(message, l10n)

@router.message(F.text.in_(MENU_COMMANDS))
async def handle_menu_command(message: Message, novel_service: NovelService, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    global novel_handlers
    novel_handlers = NovelHandlers(novel_service)
    
    is_admin, is_owner = await novel_handlers.check_permissions(message)
    if not (is_admin or is_owner):
        if not await novel_handlers.check_subscription(message, l10n):
            return
    
    command = message.text
    if command in {"üéÆ –ù–æ–≤–µ–ª–ª–∞", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç"}:
        await novel_handlers.start_novel(message, l10n)
    elif command == "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await novel_handlers.handle_message(message)

@router.message(F.text)
async def handle_text(message: Message, novel_service: NovelService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global novel_handlers
    novel_handlers = NovelHandlers(novel_service)
    await novel_handlers.handle_message(message)

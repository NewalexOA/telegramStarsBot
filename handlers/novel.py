import structlog
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from services.novel import NovelService
from filters.chat_type import ChatTypeFilter
from filters.is_subscribed import IsSubscribedFilter
from filters.is_admin import IsAdminFilter
from filters.is_owner import IsOwnerFilter
from middlewares.check_subscription import check_subscription
from keyboards.subscription import get_subscription_keyboard
from keyboards.menu import get_main_menu
from utils.openai_helper import openai_client
from models.enums import RewardType
from utils.rewards import check_balance, spend_reward

logger = structlog.get_logger()

router = Router()
router.message.filter(ChatTypeFilter(["private"]))

RESTART_COST = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö

async def start_novel_common(message: Message, session: AsyncSession, l10n):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    user_id = message.from_user.id
    novel_service = NovelService(session)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        old_state = await novel_service.get_novel_state(user_id)
        if old_state:
            await novel_service.end_story(old_state, message, silent=True)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã
        novel_state = await novel_service.create_novel_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await message.answer(
            "–ù–æ–≤–µ–ª–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_main_menu(has_active_novel=True)
        )
        loading_message = await message.answer("‚åõÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        await openai_client.beta.threads.messages.create(
            thread_id=novel_state.thread_id,
            role="user",
            content="–ù–∞—á–Ω–∏ —Å —à–∞–≥–∞ '0. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:' –∏ —Å–ø—Ä–æ—Å–∏ –º–æ—ë –∏–º—è."
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        await novel_service.process_message(
            message=message,
            novel_state=novel_state,
            initial_message=True  # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
    except Exception as e:
        logger.error(f"Error starting novel: {e}")
        await message.answer(l10n.format_value("novel-error"))

@router.callback_query(F.data == "start_novel")
@check_subscription
async def start_novel_button(callback: CallbackQuery, session: AsyncSession, l10n):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–µ–ª–ª—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
    await start_novel_common(callback.message, session, l10n)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏

@router.message(F.text == "üéÆ –ù–æ–≤–µ–ª–ª–∞")
async def menu_novel(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–µ–ª–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if await IsAdminFilter(is_admin=True)(message) or await IsOwnerFilter(is_owner=True)(message):
        await start_novel_common(message, session, l10n)
        return
        
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    novel_service = NovelService(session)
    novel_state = await novel_service.get_novel_state(message.from_user.id)
    
    if novel_state and novel_state.completions_count > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
        balance = await check_balance(session, message.from_user.id, RewardType.CHAPTER_UNLOCK)
        if balance < RESTART_COST:
            await message.answer(
                f"–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –Ω—É–∂–Ω–æ {RESTART_COST} –∑–≤–µ–∑–¥. "
                f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å {balance} –∑–≤–µ–∑–¥. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!"
            )
            return
            
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
        await spend_reward(
            session, 
            message.from_user.id, 
            RewardType.CHAPTER_UNLOCK, 
            RESTART_COST,
            "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"
        )
        await message.answer(f"–°–ø–∏—Å–∞–Ω–æ {RESTART_COST} –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–æ–≤–µ–ª–ª—ã.")
    
    await start_novel_common(message, session, l10n)

@router.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç")
async def restart_novel(message: Message, session: AsyncSession, l10n):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–≤–µ–ª–ª—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if await IsAdminFilter(is_admin=True)(message) or await IsOwnerFilter()(message):
        await start_novel_common(message, session, l10n)
        return
        
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message)
        )
        return
    
    await start_novel_common(message, session, l10n)

@router.message(F.text)
async def handle_message(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    novel_service = NovelService(session)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã
        novel_state = await novel_service.get_novel_state(user_id)
        if not novel_state:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É'")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await novel_service.process_message(
            message=message,
            novel_state=novel_state
        )
        
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        
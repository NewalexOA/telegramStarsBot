import structlog
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.exceptions import TelegramBadRequest

from services.novel import NovelService
from filters.chat_type import ChatTypeFilter
from filters.is_subscribed import IsSubscribedFilter
from filters.is_admin import IsAdminFilter
from filters.is_owner import IsOwnerFilter
from middlewares.check_subscription import check_subscription
from keyboards.subscription import get_subscription_keyboard
from keyboards.menu import get_main_menu
from filters.referral import RegularStartCommandFilter
from utils.referral_processor import process_referral
from utils.referral import create_ref_link
from config_reader import get_config, BotConfig

logger = structlog.get_logger()
bot_config = get_config(BotConfig, "bot")

router = Router(name="novel")
router.message.filter(ChatTypeFilter(["private"]))

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
PRIORITIES = {
    "COMMAND": 9,
    "ADMIN": 8,
    "MENU": 7,
    "CALLBACK": 6,
    "PAYMENT": 5,
    "TEXT": 4
}

RESTART_COST = 10

MENU_COMMANDS = {
    "üéÆ –ù–æ–≤–µ–ª–ª–∞",
    "üîÑ –†–µ—Å—Ç–∞—Ä—Ç",
    "üíù –î–æ–Ω–∞—Ç",
    "‚ùì –ü–æ–º–æ—â—å",
    "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
}

DONATE_COMMANDS = {"/donate", "/donat", "/–¥–æ–Ω–∞—Ç"}

async def check_user_permissions(message: Message) -> tuple[bool, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    is_admin = await IsAdminFilter(is_admin=True)(message)
    is_owner = await IsOwnerFilter(is_owner=True)(message)
    return is_admin, is_owner

async def check_subscription_required(message: Message, l10n) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return False
    return True

async def start_novel_common(message: Message, session: AsyncSession, l10n):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    user_id = message.from_user.id
    logger.info(f"Starting novel common for user {user_id}")
    
    novel_service = NovelService(session)
    
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã
        novel_state = await novel_service.create_novel_state(user_id)
        logger.info(f"Created novel state {novel_state.id if novel_state else None} for user {user_id}")
        
        # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è None - –∑–Ω–∞—á–∏—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞
        if novel_state is None:
            logger.info(f"Payment required for user {user_id}")
            await message.answer(
                "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.",
                reply_markup=get_main_menu(has_active_novel=False)
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await message.answer(
            "–ù–æ–≤–µ–ª–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_main_menu(has_active_novel=True)
        )
        loading_message = await message.answer("‚åõÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        logger.info(f"Processing initial message for user {user_id}")
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        await novel_service.process_message(
            message=message,
            novel_state=novel_state,
            initial_message=True  # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
    except Exception as e:
        logger.error(f"Error starting novel: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

# –ö–æ–º–∞–Ω–¥—ã
@router.message(
    Command("start"),
    ~RegularStartCommandFilter(),
    ChatTypeFilter(["private"]),
    flags={"priority": PRIORITIES["COMMAND"]}
)
async def cmd_start_ref(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
    try:
        ref_code = message.text.split()[1].replace('ref_', '')
        await process_referral(session, ref_code, message.from_user.id, message)
        await cmd_start(message, session, l10n)
    except (IndexError, ValueError) as e:
        logger.error(f"Error processing referral: {e}")
        await cmd_start(message, session, l10n)
    except Exception as e:
        logger.error(f"Unexpected error in cmd_start_ref: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

@router.message(
    Command("start"),
    RegularStartCommandFilter(),
    ChatTypeFilter(["private"]),
    flags={"priority": PRIORITIES["COMMAND"]}
)
async def cmd_start(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            l10n.format_value("hello-msg"),
            reply_markup=get_main_menu(has_active_novel=False),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

@router.message(
    F.text.in_(MENU_COMMANDS),
    ChatTypeFilter(["private"]),
    flags={"priority": PRIORITIES["MENU"]}
)
async def handle_menu_command(message: Message, session: AsyncSession, l10n):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    try:
        command = message.text
        user_id = message.from_user.id
        is_admin, is_owner = await check_user_permissions(message)
        
        if command == "üéÆ –ù–æ–≤–µ–ª–ª–∞":
            if not (is_admin or is_owner):
                if not await check_subscription_required(message, l10n):
                    return
            await start_novel_common(message, session, l10n)
            
        elif command == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç":
            novel_service = NovelService(session)
            novel_state = await novel_service.get_novel_state(user_id)
            
            if not (is_admin or is_owner):
                if not await check_subscription_required(message, l10n):
                    return
                if novel_state and novel_state.needs_payment:
                    await send_restart_invoice(message, l10n)
                    return
            
            await start_novel_common(message, session, l10n)
            
        elif command == "üíù –î–æ–Ω–∞—Ç":
            await menu_donate(message, l10n)
            
        elif command == "‚ùì –ü–æ–º–æ—â—å":
            await menu_help(message, l10n)
            
        elif command == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
            await menu_referral(message, session, l10n)
            
        elif command == "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            if not await check_subscription_required(message, l10n):
                return
                
            novel_service = NovelService(session)
            novel_state = await novel_service.get_novel_state(user_id)
            
            if not novel_state:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã. –ù–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                    reply_markup=get_main_menu(has_active_novel=False)
                )
                return
                
            last_message = await novel_service.get_last_assistant_message(novel_state)
            if last_message:
                await message.answer(
                    last_message,
                    reply_markup=get_main_menu(has_active_novel=True)
                )
            else:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    reply_markup=get_main_menu(has_active_novel=True)
                )
            
    except Exception as e:
        logger.error(f"Error in handle_menu_command: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

@router.message(
    Command("donate", "donat", "–¥–æ–Ω–∞—Ç"),
    ChatTypeFilter(["private"]),
    flags={"priority": PRIORITIES["COMMAND"]}
)
async def cmd_donate(message: Message, command: CommandObject, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–Ω–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏"""
    try:
        if command.args is None or not command.args.isdigit() or not 1 <= int(command.args) <= 2500:
            await message.answer(
                l10n.format_value("donate-input-error"),
                parse_mode="HTML"
            )
            return

        amount = int(command.args)
        await send_donate_invoice(message, amount, l10n)
        
    except Exception as e:
        logger.error(f"Error processing donate command: {e}", exc_info=True)
        await message.answer(l10n.format_value("donate-input-error"))

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
@router.message(
    F.text.in_({"üéÆ –ù–æ–≤–µ–ª–ª–∞", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç"}),
    flags={"priority": PRIORITIES["MENU"]}
)
async def handle_menu_buttons(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –Ω–æ–≤–µ–ª–ª—ã"""
    try:
        user_id = message.from_user.id
        is_admin, is_owner = await check_user_permissions(message)
        
        if message.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç":
            if not (is_admin or is_owner):
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–µ–ª–ª—ã")
                return
                
            novel_service = NovelService(session)
            novel_state = await novel_service.get_novel_state(user_id)
            
            if novel_state and novel_state.needs_payment:
                await send_restart_invoice(message, l10n)
                return
        
        if not (is_admin or is_owner):
            if not await check_subscription_required(message, l10n):
                return
        
        await start_novel_common(message, session, l10n)
        
    except Exception as e:
        logger.error(f"Error in handle_menu_buttons: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@router.message(
    F.text == "üíù –î–æ–Ω–∞—Ç",
    flags={"priority": PRIORITIES["MENU"]}
)
async def menu_donate(message: Message, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–Ω–∞—Ç"""
    await message.answer(
        l10n.format_value("donate-input-error"),
        parse_mode="HTML"
    )

@router.message(
    F.text == "‚ùì –ü–æ–º–æ—â—å",
    flags={"priority": PRIORITIES["MENU"]}
)
async def menu_help(message: Message, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await message.answer(
        l10n.format_value("help"),
        parse_mode="HTML"
    )

@router.message(
    F.text == "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
    flags={"priority": PRIORITIES["MENU"]}
)
async def menu_continue(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
    try:
        if not await check_subscription_required(message, l10n):
            return
            
        user_id = message.from_user.id
        novel_service = NovelService(session)
        
        novel_state = await novel_service.get_novel_state(user_id)
        if not novel_state:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã. –ù–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                reply_markup=get_main_menu(has_active_novel=False)
            )
            return
            
        last_message = await novel_service.get_last_assistant_message(novel_state)
        if last_message:
            await message.answer(
                last_message,
                reply_markup=get_main_menu(has_active_novel=True)
            )
        else:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                reply_markup=get_main_menu(has_active_novel=True)
            )
            
    except Exception as e:
        logger.error(f"Error in menu_continue: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –Ω–æ–≤–µ–ª–ª—ã")

# Callback-–∑–∞–ø—Ä–æ—Å—ã
@router.callback_query(
    F.data == "start_novel",
    flags={"priority": PRIORITIES["CALLBACK"]}
)
@check_subscription
async def start_novel_button(callback: CallbackQuery, session: AsyncSession, l10n):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–µ–ª–ª—ã —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    try:
        await start_novel_common(callback.message, session, l10n)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_novel_button: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–≤–µ–ª–ª—ã")

@router.callback_query(
    F.data == "restart_cancel",
    flags={"priority": PRIORITIES["CALLBACK"]}
)
async def cancel_restart(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞"""
    try:
        await callback.message.delete()
        await callback.answer("–†–µ—Å—Ç–∞—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"Error in cancel_restart: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞")

# –ü–ª–∞—Ç–µ–∂–∏
@router.message(
    F.successful_payment,
    flags={"priority": PRIORITIES["PAYMENT"]}
)
async def handle_successful_payment(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        if message.successful_payment.invoice_payload == "novel_restart":
            novel_service = NovelService(session)
            novel_state = await novel_service.get_novel_state(message.from_user.id)
            if novel_state:
                novel_state.needs_payment = False
                await session.commit()
            
            await start_novel_common(message, session, l10n)
            await message.answer(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ù–æ–≤–µ–ª–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error processing payment: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@router.message(
    F.text,
    ~F.text.startswith("/"),  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    ~F.text.in_(MENU_COMMANDS),  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    flags={"priority": PRIORITIES["TEXT"]}
)
async def handle_message(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        novel_service = NovelService(session)
        
        novel_state = await novel_service.get_novel_state(user_id)
        if not novel_state:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'ÔøΩÔøΩ –ù–æ–≤–µ–ª–ª–∞'",
                reply_markup=get_main_menu(has_active_novel=False)
            )
            return
            
        await novel_service.process_message(
            message=message,
            novel_state=novel_state,
            initial_message=False
        )
    except Exception as e:
        logger.error(f"Error handling message: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(
    F.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    ChatTypeFilter(["private"]),
    flags={"priority": PRIORITIES["MENU"]}
)
async def menu_referral(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"""
    try:
        ref_link = await create_ref_link(session, message.from_user.id)
        bot_username = (await message.bot.me()).username
        full_link = f"https://t.me/{bot_username}?start=ref_{ref_link.code}"
        
        await message.answer(
            l10n.format_value("referral-link-msg", {
                "link": full_link,
                "reward": "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã"
            }),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error generating referral link: {e}", exc_info=True)
        await message.answer(l10n.format_value("referral-link-error"))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

async def send_restart_invoice(message: Message, l10n):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    kb = InlineKeyboardBuilder()
    kb.button(
        text=l10n.format_value("restart-button-pay", {"amount": RESTART_COST}),
        pay=True
    )
    kb.button(
        text=l10n.format_value("restart-button-cancel"),
        callback_data="restart_cancel"
    )
    kb.adjust(1)

    await message.answer_invoice(
        title=l10n.format_value("restart-invoice-title"),
        description=l10n.format_value("restart-invoice-description"),
        prices=[LabeledPrice(label="XTR", amount=RESTART_COST)],
        provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Stars
        payload="novel_restart",
        currency="XTR",
        reply_markup=kb.as_markup()
    )

async def send_donate_invoice(message: Message, amount: int, l10n):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–∞"""
    kb = InlineKeyboardBuilder()
    kb.button(
        text=l10n.format_value("donate-button-pay", {"amount": amount}),
        pay=True
    )
    kb.button(
        text=l10n.format_value("donate-button-cancel"),
        callback_data="donate_cancel"
    )
    kb.adjust(1)

    await message.answer_invoice(
        title=l10n.format_value("donate-invoice-title"),
        description=l10n.format_value("donate-invoice-description", {"amount": amount}),
        prices=[LabeledPrice(label="XTR", amount=amount)],
        provider_token=bot_config.provider_token,  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
        payload=f"{amount}_stars",
        currency="XTR",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "donate_cancel")
async def on_donate_cancel(callback: CallbackQuery, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–Ω–∞—Ç–∞"""
    await callback.answer(l10n.format_value("donate-cancel-payment"))
    await callback.message.delete()

@router.message(
    Command("refund"),
    ChatTypeFilter(["private"]),
    flags={"priority": PRIORITIES["COMMAND"]}
)
async def cmd_refund(message: Message, bot: Bot, command: CommandObject, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–≤–µ–∑–¥"""
    if command.args is None:
        await message.answer(
            l10n.format_value("donate-refund-input-error"),
            parse_mode="HTML"
        )
        return

    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=command.args
        )
        await message.answer(
            l10n.format_value("donate-refund-success"),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        err_text = l10n.format_value("donate-refund-code-not-found")
        if "CHARGE_ALREADY_REFUNDED" in str(e):
            err_text = l10n.format_value("donate-refund-already-refunded")
        await message.answer(
            err_text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error processing refund: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

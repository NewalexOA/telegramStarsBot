import structlog
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from services.novel import NovelService
from filters.chat_type import ChatTypeFilter
from keyboards.menu import get_main_menu
from filters.referral import RegularStartCommandFilter

logger = structlog.get_logger()

router = Router(name="novel")
router.message.filter(ChatTypeFilter(["private"]))

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
PRIORITIES = {
    "COMMAND": 5,
    "MENU": 4,
    "CALLBACK": 3,
    "TEXT": 1
}

MENU_COMMANDS = {
    "üéÆ –ù–æ–≤–µ–ª–ª–∞",
    "üîÑ –†–µ—Å—Ç–∞—Ä—Ç",
    "üíù –î–æ–Ω–∞—Ç",
    "‚ùì –ü–æ–º–æ—â—å",
    "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
}

async def start_novel_common(message: Message, novel_service: NovelService, l10n) -> None:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    user_id = message.from_user.id
    logger.info(f"Starting novel for user {user_id}")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã
        novel_state = await novel_service.create_novel_state(user_id)
        if not novel_state:
            await message.answer(
                l10n.format_value("novel-payment-required"),
                reply_markup=get_main_menu(has_active_novel=False)
            )
            return
            
        await message.answer(
            l10n.format_value("novel-started"),
            reply_markup=get_main_menu(has_active_novel=True)
        )
        loading_message = await message.answer("‚åõÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        await novel_service.process_message(
            message=message,
            novel_state=novel_state,
            initial_message=True
        )
        await loading_message.delete()
        
    except Exception as e:
        logger.error(f"Error starting novel: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

async def continue_novel(message: Message, novel_service: NovelService, l10n) -> None:
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–≤–µ–ª–ª—ã"""
    try:
        novel_state = await novel_service.get_novel_state(message.from_user.id)
        if not novel_state:
            await message.answer(
                l10n.format_value("no-active-novel"),
                reply_markup=get_main_menu(has_active_novel=False)
            )
            return
            
        last_message = await novel_service.get_last_assistant_message(novel_state)
        if last_message:
            await message.answer(
                last_message,
                reply_markup=get_main_menu(has_active_novel=True)
            )
        else:
            await message.answer(
                l10n.format_value("no-last-message"),
                reply_markup=get_main_menu(has_active_novel=True)
            )
            
    except Exception as e:
        logger.error(f"Error continuing novel: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

@router.message(Command("start"), RegularStartCommandFilter())
async def cmd_start(message: Message, novel_service: NovelService, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await start_novel_common(message, novel_service, l10n)

@router.message(F.text.in_(MENU_COMMANDS), flags={"priority": PRIORITIES["MENU"]})
async def handle_menu_command(message: Message, novel_service: NovelService, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    command = message.text
    if command in {"üéÆ –ù–æ–≤–µ–ª–ª–∞", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç"}:
        await start_novel_common(message, novel_service, l10n)
    elif command == "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await continue_novel(message, novel_service, l10n)
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö

@router.message(F.text, flags={"priority": PRIORITIES["TEXT"]})
async def handle_text(message: Message, novel_service: NovelService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    novel_state = await novel_service.get_novel_state(message.from_user.id)
    if not novel_state:
        return
        
    await novel_service.process_message(
        message=message,
        novel_state=novel_state,
        initial_message=False
    )

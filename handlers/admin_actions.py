import os
import structlog
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy import select, func

from filters.is_admin import IsAdminFilter
from services.novel import NovelService
from keyboards.menu import get_main_menu
from models.referral import Referral
from models.base import Base

logger = structlog.get_logger()

router = Router()
router.message.filter(IsAdminFilter(is_admin=True))
router.callback_query.filter(IsAdminFilter(is_admin=True))

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    await message.answer("Pong!")

@router.message(Command("get_id"))
async def cmd_get_id(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞"""
    await message.answer(
        f"User ID: {message.from_user.id}\n"
        f"Chat ID: {message.chat.id}"
    )

@router.message(Command("end_novel"))
async def cmd_end_novel(message: Message, session: AsyncSession, l10n):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –∞–¥–º–∏–Ω–æ–º"""
    novel_service = NovelService(session)
    novel_state = await novel_service.get_novel_state(message.from_user.id)
    
    if novel_state:
        await novel_service.end_story(novel_state, message)
        await message.answer(
            "–ù–æ–≤–µ–ª–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            reply_markup=get_main_menu(has_active_novel=False)
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def menu_stats(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    logger.info(f"Stats requested by admin {message.from_user.id}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        total_referrals = await session.scalar(
            select(func.count()).select_from(Referral)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        unique_referrers = await session.scalar(
            select(func.count(func.distinct(Referral.referrer_id))).select_from(Referral)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
        top_referrers_query = select(
            Referral.referrer_id,
            func.count().label('ref_count')
        ).group_by(
            Referral.referrer_id
        ).order_by(
            func.count().desc()
        ).limit(5)
        
        top_referrers = await session.execute(top_referrers_query)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
            f"–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: {unique_referrers}\n\n"
            "–¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:\n"
        )
        
        for referrer_id, count in top_referrers:
            stats_message += f"ID {referrer_id}: {count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        
        await message.answer(
            stats_message,
            reply_markup=get_main_menu(is_admin=True)
        )
        logger.info(f"Stats sent to admin {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error showing stats: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_main_menu(is_admin=True)
        )

@router.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É")
async def menu_clear_db(message: Message, l10n):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"Database cleanup requested by admin {message.from_user.id}")
    try:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –î–∞", callback_data="clear_db_confirm")
        kb.button(text="‚ùå –ù–µ—Ç", callback_data="clear_db_cancel")
        kb.adjust(2)
        
        await message.answer(
            l10n.format_value("clear-db-confirm"),
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        logger.error(f"Error showing cleanup confirmation: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã",
            reply_markup=get_main_menu(is_admin=True)
        )

@router.callback_query(F.data == "clear_db_confirm")
async def clear_db_confirm(callback: CallbackQuery, session: AsyncSession, l10n):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.edit_text(
            l10n.format_value("clear-db-success")
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        await session.close()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π engine –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        engine = create_async_engine(
            "sqlite+aiosqlite:///bot.db",
            echo=False
        )
        await engine.dispose()
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists("bot.db"):
            os.remove("bot.db")
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        new_engine = create_async_engine(
            "sqlite+aiosqlite:///bot.db",
            echo=False
        )
        async with new_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        await new_engine.dispose()
            
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        os._exit(0)
        
    except Exception as e:
        logger.error(f"Error clearing database: {e}", exc_info=True)
        await callback.message.edit_text(
            l10n.format_value("clear-db-error", {"error": str(e)})
        )

@router.callback_query(F.data == "clear_db_cancel")
async def clear_db_cancel(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã"""
    await callback.message.delete()

import structlog
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder

from fluent.runtime import FluentLocalization
from filters.is_subscribed import IsSubscribedFilter
from keyboards.subscription import get_subscription_keyboard
from filters.chat_type import ChatTypeFilter
from filters.referral import RegularStartCommandFilter
from keyboards.menu import get_main_menu
from services.novel import NovelService
from services.referral import ReferralService
from filters.is_admin import IsAdminFilter
from filters.is_owner import IsOwnerFilter

logger = structlog.get_logger()

# Declare router
router = Router()
router.message.filter(ChatTypeFilter(["private"]))

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
RESTART_COST = 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–µ–ª–ª—ã –≤ Stars

@router.message(Command("start"), RegularStartCommandFilter())
async def cmd_start(
    message: Message,
    novel_service: NovelService,
    l10n: FluentLocalization
):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_admin = await IsAdminFilter(is_admin=True)(message) or await IsOwnerFilter(is_owner=True)(message)
    
    novel_state = await novel_service.get_novel_state(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–µ–ª–ª—É —Ä–∞–Ω–µ–µ
    if novel_state and novel_state.is_completed and not is_admin:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await send_restart_invoice(message, l10n)
        return
    
    if is_admin:
        await message.answer(
            l10n.format_value("hello-msg"),
            reply_markup=get_main_menu(has_active_novel=bool(novel_state), is_admin=True),
            parse_mode="HTML"
        )
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await IsSubscribedFilter()(message)
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = get_main_menu(has_active_novel=bool(novel_state)) if is_subscribed else await get_subscription_keyboard(message)
    
    await message.answer(
        l10n.format_value("hello-msg"),
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

@router.message(F.text == "üéÆ –ù–æ–≤–µ–ª–ª–∞")
async def menu_novel(
    message: Message,
    novel_service: NovelService,
    l10n: FluentLocalization
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–µ–ª–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_admin = await IsAdminFilter(is_admin=True)(message) or await IsOwnerFilter(is_owner=True)(message)
    
    if is_admin:
        await start_novel_common(message, novel_service, l10n)
        return
        
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return
    
    novel_state = await novel_service.get_novel_state(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–µ–ª–ª—É —Ä–∞–Ω–µ–µ
    if novel_state and novel_state.is_completed:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        await send_restart_invoice(message, l10n)
        return
    
    await start_novel_common(message, novel_service, l10n)

@router.message(F.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def menu_ref_link(
    message: Message,
    referral_service: ReferralService,
    l10n: FluentLocalization
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        link = await referral_service.create_referral_link(message.from_user.id)
        if not link:
            await message.answer(l10n.format_value("error-creating-link"))
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –±–æ—Ç–∞
        bot_username = (await message.bot.me()).username
        invite_link = f"https://t.me/{bot_username}?start=ref_{link.code}"
        
        await message.answer(
            l10n.format_value(
                "referral-link-msg",
                {
                    "link": invite_link,
                    "reward": "–Ω–∞–≥—Ä–∞–¥—É"
                }
            ),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error generating referral link: {e}")
        await message.answer(
            l10n.format_value("referral-link-error"),
            parse_mode="HTML"
        )

async def send_restart_invoice(message: Message, l10n: FluentLocalization):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    kb = InlineKeyboardBuilder()
    kb.button(
        text=l10n.format_value("restart-button-pay", {"amount": RESTART_COST}),
        pay=True
    )
    kb.button(
        text=l10n.format_value("restart-button-cancel"),
        callback_data="restart_cancel"
    )
    kb.adjust(1)

    await message.answer_invoice(
        title=l10n.format_value("restart-invoice-title"),
        description=l10n.format_value("restart-invoice-description"),
        prices=[LabeledPrice(label="XTR", amount=RESTART_COST)],
        provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Stars
        payload="novel_restart",
        currency="XTR",
        reply_markup=kb.as_markup()
    )

async def start_novel_common(
    message: Message,
    novel_service: NovelService,
    l10n: FluentLocalization
):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–µ–ª–ª—ã"""
    user_id = message.from_user.id
    logger.info(f"Starting novel common for user {user_id}")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã
        novel_state = await novel_service.create_novel_state(user_id)
        logger.info(f"Created novel state {novel_state.id if novel_state else None} for user {user_id}")
        
        # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è None - –∑–Ω–∞—á–∏—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞
        if novel_state is None:
            logger.info(f"Payment required for user {user_id}")
            await message.answer(
                "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.",
                reply_markup=get_main_menu(has_active_novel=False)
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await message.answer(
            "–ù–æ–≤–µ–ª–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_main_menu(has_active_novel=True)
        )
        loading_message = await message.answer("‚åõÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        logger.info(f"Processing initial message for user {user_id}")
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
        await novel_service.process_message(
            message=message,
            novel_state=novel_state,
            initial_message=True  # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
    except Exception as e:
        logger.error(f"Error starting novel: {e}", exc_info=True)
        await message.answer(l10n.format_value("novel-error"))

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è ...

import structlog
from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from fluent.runtime import FluentLocalization
from filters.is_subscribed import IsSubscribedFilter
from keyboards.subscription import get_subscription_keyboard
from filters.chat_type import ChatTypeFilter
from filters.referral import RegularStartCommandFilter
from middlewares.check_subscription import check_subscription
from keyboards.menu import get_main_menu
from services.novel import NovelService
from handlers.novel import start_novel_common  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from filters.is_admin import IsAdminFilter
from filters.is_owner import IsOwnerFilter

logger = structlog.get_logger()

# Declare router
router = Router()
router.message.filter(ChatTypeFilter(["private"]))

@router.message(Command("start"), RegularStartCommandFilter())
async def cmd_start(message: Message, session: AsyncSession, l10n):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_admin = await IsAdminFilter(is_admin=True)(message) or await IsOwnerFilter(is_owner=True)(message)
    
    novel_service = NovelService(session)
    novel_state = await novel_service.get_novel_state(message.from_user.id)
    
    if is_admin:
        await message.answer(
            l10n.format_value("hello-msg"),
            reply_markup=get_main_menu(has_active_novel=bool(novel_state), is_admin=True),
            parse_mode="HTML"
        )
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await IsSubscribedFilter()(message)
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = get_main_menu(has_active_novel=bool(novel_state)) if is_subscribed else await get_subscription_keyboard(message, is_subscribed=False)
    
    await message.answer(
        l10n.format_value("hello-msg"),
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

@router.message(F.text == "üéÆ –ù–æ–≤–µ–ª–ª–∞")
async def menu_novel(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–µ–ª–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    if await IsAdminFilter(is_admin=True)(message) or await IsOwnerFilter()(message):
        await start_novel_common(message, session, l10n)
        return
        
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return
    
    await start_novel_common(message, session, l10n)

@router.message(F.text == "üíù –î–æ–Ω–∞—Ç")
async def menu_donate(message: Message, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–Ω–∞—Ç"""
    await message.answer(
        l10n.format_value("donate-input-error"),
        parse_mode="HTML"
    )

@router.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç")
async def menu_restart(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–µ—Å—Ç–∞—Ä—Ç"""
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–µ–ª–ª—ã
    await start_novel_common(message, session, l10n)

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def menu_help(message: Message, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await message.answer(
        l10n.format_value("help"),
        parse_mode="HTML"
    )

@router.message(Command("donate", "donat", "–¥–æ–Ω–∞—Ç"))
async def cmd_donate(message: Message, command: CommandObject, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–Ω–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏"""
    if command.args is None or not command.args.isdigit() or not 1 <= int(command.args) <= 2500:
        await message.answer(
            l10n.format_value("donate-input-error"),
            parse_mode="HTML"
        )
        return

    amount = int(command.args)

    kb = InlineKeyboardBuilder()
    kb.button(
        text=l10n.format_value("donate-button-pay", {"amount": amount}),
        pay=True
    )
    kb.button(
        text=l10n.format_value("donate-button-cancel"),
        callback_data="donate_cancel"
    )
    kb.adjust(1)

    prices = [LabeledPrice(label="XTR", amount=amount)]

    await message.answer_invoice(
        title=l10n.format_value("donate-invoice-title"),
        description=l10n.format_value("donate-invoice-description", {"amount": amount}),
        prices=prices,
        provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Stars
        payload=f"{amount}_stars",
        currency="XTR",
        reply_markup=kb.as_markup()
    )

@router.message(Command("help"))
async def cmd_help(message: Message, l10n):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /help
    """
    await message.answer(
        l10n.format_value("help"),
        parse_mode="HTML"
    )

@router.message(Command("language"))
async def cmd_language(message: Message, l10n):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /language
    """
    await message.answer(
        l10n.format_value("language"),
        reply_markup=await get_subscription_keyboard(message),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "check_subscription")
@check_subscription
async def check_subscription_callback(callback: CallbackQuery, session: AsyncSession, l10n):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –≤—ã–≤–∞–Ω, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if await IsSubscribedFilter()(callback.message):
        await callback.message.delete()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã
        novel_service = NovelService(session)
        novel_state = await novel_service.get_novel_state(callback.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã
        menu = get_main_menu(has_active_novel=bool(novel_state))
        
        await callback.message.answer(
            l10n.format_value("subscription-confirmed"),
            reply_markup=menu
        )
    else:
        await callback.answer(
            l10n.format_value("subscription-check-failed"),
            show_alert=True
        )

@router.callback_query(F.data == "show_donate")
async def show_donate_info(callback: CallbackQuery, l10n):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–∞—Ç–µ"""
    await callback.message.answer(
        l10n.format_value("donate-input-error"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "donate_cancel")
async def on_donate_cancel(callback: CallbackQuery, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–Ω–∞—Ç–∞"""
    await callback.answer(l10n.format_value("donate-cancel-payment"))
    await callback.message.delete()

@router.message(Command("refund"))
async def cmd_refund(message: Message, bot: Bot, command: CommandObject, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–≤–µ–∑–¥"""
    t_id = command.args
    if t_id is None:
        await message.answer(
            l10n.format_value("donate-refund-input-error"),
            parse_mode="HTML"
        )
        return

    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=t_id
        )
        await message.answer(
            l10n.format_value("donate-refund-success"),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        err_text = l10n.format_value("donate-refund-code-not-found")
        if "CHARGE_ALREADY_REFUNDED" in e.message:
            err_text = l10n.format_value("donate-refund-already-refunded")
        await message.answer(
            err_text,
            parse_mode="HTML"
        )
        return

@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query"""
    await query.answer(ok=True)

@router.message(F.successful_payment)
async def on_successful_payment(message: Message, l10n: FluentLocalization):
    """–û–±—Ä–∞–±—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    await message.answer(
        l10n.format_value(
            "donate-successful-payment",
            {"t_id": message.successful_payment.telegram_payment_charge_id}
        ),
        parse_mode="HTML",
        message_effect_id="5159385139981059251"
    )

@router.message(F.text == "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def menu_continue(message: Message, session: AsyncSession, l10n):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
    if not await IsSubscribedFilter()(message):
        await message.answer(
            l10n.format_value("subscription-required"),
            reply_markup=await get_subscription_keyboard(message),
            parse_mode="HTML"
        )
        return
    
    novel_service = NovelService(session)
    user_id = message.from_user.id
    
    try:
        novel_state = await novel_service.get_novel_state(user_id)
        if not novel_state:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã. –ù–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
            return
            
        last_message = await novel_service.get_last_assistant_message(novel_state)
        if last_message:
            await message.answer(last_message)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å, —á–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            
    except Exception as e:
        logger.error(f"Error in menu_continue: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

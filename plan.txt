План рефакторинга архитектуры БД

✅ Этап 1: Подготовка структуры
- Созданы директории:
  project/
  ├── database/
  │   ├── __init__.py
  │   ├── interface.py      # ✅ Создан
  │   └── sqlalchemy.py     # ✅ Создан
  ├── repositories/
  │   ├── __init__.py
  │   ├── base.py          # ✅ Создан
  │   ├── novel.py         # ✅ Создан
  │   └── referral.py      # ✅ Создан
  └── unit_of_work/
      ├── __init__.py
      └── unit_of_work.py  # ✅ Создан

✅ Этап 2: Создание базовых интерфейсов
✅ 1. Создан database/interface.py
✅ 2. Создан repositories/base.py

✅ Этап 3: Реализация репозиториев
✅ 1. Создан repositories/novel.py
✅ 2. Создан repositories/referral.py

✅ Этап 4: Реализация Unit of Work
✅ 1. Создан unit_of_work/unit_of_work.py

✅ Этап 5: Обновление сервисов
✅ 1. Создан оновленный services/novel.py
✅ 2. Создан services/referral.py

✅ Этап 6: Внедрение зависимостей
✅ 1. Создан di/container.py:
   - Контейнер зависимостей
   - Инициализация всех сервисов
   - Управление жизненным циклом
✅ 2. Обновлен bot.py

⏳ Этап 7: Обновление обработчиков
   - Использовать внедрение зависимостей
   - Убрать прямые обращения к БД
   - Использовать сервисы
✅ 1. Обновлен handlers/personal_actions.py
✅ 2. Обновлен handlers/novel.py
✅ 3. Обновлен handlers/group_events.py

⏳ Этап 8: Обновление middleware
✅ 1. Обновлен middlewares/check_subscription.py:
   - Использован UnitOfWork
   - Внедрены зависимости через @inject
   - Перенесена бизнес-логика в сервисы

from aiogram.utils.dependency import inject

class DbSessionMiddleware(BaseMiddleware):
    @inject
    def __init__(self, uow: UnitOfWork):
        self.uow = uow
        
    async def __call__(self, handler, event, data):
        async with self.uow as uow:
            data["uow"] = uow
            return await handler(event, data)

⏳ Этап 9: Тестирование
✅ 1. Создана базовая структура тестов:
   - Добавлены фикстуры в conftest.py
   - Настроен DependencyOverrider
   - Добавлены моки сервисов
✅ 2. Добавлены тесты сервисов:
   - test_novel_service.py
   - test_admin_service.py
⏳ 3. Добавляются тесты обработчиков:
   - test_admin_actions.py
   - test_personal_actions.py
⏳ 4. Интеграционные тесты

Этап 10: Миграция данных
1. Создать скрипты миграции
2. Протестировать на тестовой базе
3. Выполнить миграцию на продакшене
4. Проверить целостность данных

Этап 11: Документация
1. Описать новую архитектуру
2. Обновить комментарии в коде
3. Создать примеры использования
4. Обновить README.md

Порядок выполнения:
1. Начать с создания базовых интерфейсов
2. Реализовать репозитории для одной сущности
3. Протестировать на одном модуле
4. Постепенно расширять на остальные части системы
5. Регулярно тестировать каждый этап

Это позволит:
- Постепенно перейти на новую архитектуру
- Минимизировать риски
- Сохранить работоспособность системы во время рефакторинга 

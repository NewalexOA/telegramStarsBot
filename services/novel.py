import asyncio
import structlog
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message
from config_reader import get_config, BotConfig
import time

from models.novel import NovelState, NovelMessage
from utils.openai_helper import openai_client, send_assistant_response
from utils.text_utils import extract_images_and_clean_text
from keyboards.menu import get_main_menu

logger = structlog.get_logger()
bot_config = get_config(BotConfig, "bot")

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
SKIP_COMMANDS = {
    "üéÆ –ù–æ–≤–µ–ª–ª–∞", "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç", 
    "üíù –î–æ–Ω–∞—Ç", "‚ùì –ü–æ–º–æ—â—å", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"
}

class NovelService:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_novel_state(self, user_id: int) -> NovelState | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.session.execute(
            select(NovelState).where(NovelState.user_id == user_id)
        )
        return result.scalar_one_or_none()

    async def create_novel_state(self, user_id: int) -> NovelState | None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            old_state = await self.get_novel_state(user_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ - –∑–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
            if old_state and old_state.needs_payment:
                logger.info(f"Blocked novel creation - payment required for user {user_id}")
                return None
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if old_state:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
                try:
                    if old_state.thread_id:
                        await openai_client.beta.threads.delete(thread_id=old_state.thread_id)
                except Exception as e:
                    logger.error(f"Error deleting thread: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
                    
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                await self.session.delete(old_state)
                await self.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –≤ OpenAI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    thread = await openai_client.beta.threads.create()
                    break
                except Exception as e:
                    if attempt == max_retries - 1:
                        logger.error(f"Failed to create thread after {max_retries} attempts: {e}")
                        raise
                    logger.warning(f"Attempt {attempt + 1} failed: {e}")
                    await asyncio.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            novel_state = NovelState(
                user_id=user_id,
                thread_id=thread.id,
                current_scene=0,
                is_completed=False,
                needs_payment=False
            )
            
            self.session.add(novel_state)
            await self.session.commit()
            await self.session.refresh(novel_state)
            
            return novel_state
            
        except Exception as e:
            logger.error(f"Error creating novel state: {e}")
            await self.session.rollback()
            raise

    async def save_message(self, novel_state: NovelState, content: str, is_user: bool = False) -> NovelMessage:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É"""
        message = NovelMessage(
            novel_state_id=novel_state.id,
            content=content,
            is_user=is_user
        )
        self.session.add(message)
        await self.session.commit()
        return message

    async def get_last_assistant_message(self, novel_state: NovelState) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        result = await self.session.execute(
            select(NovelMessage)
            .where(
                NovelMessage.novel_state_id == novel_state.id,
                ~NovelMessage.is_user
            )
            .order_by(NovelMessage.created_at.desc())
            .limit(1)
        )
        message = result.scalar_one_or_none()
        return message.content if message else None

    async def process_message(self, message: Message, novel_state: NovelState, initial_message: bool = False) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            try:
                thread = await openai_client.beta.threads.retrieve(thread_id=novel_state.thread_id)
                if not thread:
                    raise Exception("Thread not found")
            except Exception as e:
                logger.error(f"Thread validation failed: {e}")
                thread = await openai_client.beta.threads.create()
                novel_state.thread_id = thread.id
                await self.session.commit()

            if not initial_message:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                text = message.text
                # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ process_message
                if text.startswith('/') or text in SKIP_COMMANDS:
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ü–µ–Ω—ã
                messages = await openai_client.beta.threads.messages.list(
                    thread_id=novel_state.thread_id
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏
                if messages.data and ("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞:" in messages.data[0].content[0].text.value or 
                                    "–ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏" in messages.data[0].content[0].text.value):
                    await self.end_story(novel_state, message)
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è
                await self.save_message(novel_state, text, is_user=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–µ–¥
                await openai_client.beta.threads.messages.create(
                    thread_id=novel_state.thread_id,
                    role="user",
                    content=text
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º (–∏–º—è)
                if len(messages.data) == 2:  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
                    logger.info("Sending character introduction prompt")
                    await openai_client.beta.threads.messages.create(
                        thread_id=novel_state.thread_id,
                        role="user",
                        content=f"""–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è —Ñ–æ—Ä–º–∞—Ç—É –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É. 
                        
                        –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ò–≥—Ä–æ–∫", "–°–∞—à–∞" –∏ –ø–æ–¥–æ–±–Ω—ã–µ –Ω–∞ –∏–º—è –∏–≥—Ä–æ–∫–∞ "{text}". –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ —ç—Ç–æ –∏–º—è.
                        
                        –ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [AI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ: ![–Ω–∞–∑–≤–∞–Ω–∏–µ](—Å—Å—ã–ª–∫–∞)]"""
                    )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            start_time = time.time()
            run = await openai_client.beta.threads.runs.create(
                thread_id=novel_state.thread_id,
                assistant_id=bot_config.assistant_id
            )
            logger.info(f"Started run {run.id}")

            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            while True:
                run_status = await openai_client.beta.threads.runs.retrieve(
                    thread_id=novel_state.thread_id,
                    run_id=run.id
                )
                if run_status.status == 'completed':
                    logger.info(f"Run completed in {time.time() - start_time:.2f} seconds")
                    break
                elif run_status.status == 'requires_action':
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ end_story
                    tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
                    tool_outputs = []
                    
                    for tool_call in tool_calls:
                        if tool_call.function.name == "end_story":
                            await self.end_story(novel_state, message)
                            tool_outputs.append({
                                "tool_call_id": tool_call.id,
                                "output": "Story ended successfully"
                            })
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                    await openai_client.beta.threads.runs.submit_tool_outputs(
                        thread_id=novel_state.thread_id,
                        run_id=run.id,
                        tool_outputs=tool_outputs
                    )
                elif run_status.status == 'failed':
                    logger.error(f"Run failed: {run_status.last_error}")
                    raise Exception("Assistant run failed")
                await asyncio.sleep(1)

            # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            messages = await openai_client.beta.threads.messages.list(
                thread_id=novel_state.thread_id
            )
            assistant_message = messages.data[0].content[0].text.value
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.info(f"Raw assistant response:\n{assistant_message}")
            cleaned_text, image_ids = extract_images_and_clean_text(assistant_message)
            logger.info(f"Found image IDs: {image_ids}")
            logger.info(f"Cleaned text:\n{cleaned_text}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not any(pattern in cleaned_text.lower() for pattern in [
                "—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –Ω–æ–≤–µ–ª–ª–∞",
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                "–∏—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"
            ]):
                await self.save_message(novel_state, cleaned_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_assistant_response(message, assistant_message)

        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é
            if "unsupported_country_region_territory" in str(e):
                await message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. "
                    "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã."
                )
                logger.error(f"OpenAI region restriction error: {e}")
                return
            
            logger.error(f"Error processing message: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    async def end_story(self, novel_state: NovelState, message: Message, silent: bool = False) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–æ–≤–µ–ª–ª—É –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
            novel_state.needs_payment = True
            novel_state.is_completed = True
            await self.session.commit()
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
            try:
                await openai_client.beta.threads.delete(thread_id=novel_state.thread_id)
            except Exception as e:
                logger.error(f"Error deleting thread: {e}")
            
            if not silent:
                await message.answer(
                    "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞'",
                    reply_markup=get_main_menu(has_active_novel=False)
                )
                
        except Exception as e:
            logger.error(f"Error ending story: {e}")
            if not silent:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
import asyncio
import structlog
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message
from config_reader import get_config, BotConfig
from typing import Optional

from models.novel import NovelState, NovelMessage
from utils.openai_helper import openai_client
from utils.text_utils import extract_images_and_clean_text
from keyboards.menu import get_main_menu

logger = structlog.get_logger()
bot_config = get_config(BotConfig, "bot")

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
SKIP_COMMANDS = {
    "üéÆ –ù–æ–≤–µ–ª–ª–∞", "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç", 
    "üíù –î–æ–Ω–∞—Ç", "‚ùì –ü–æ–º–æ—â—å", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"
}

class NovelService:
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    MAX_WAIT_TIME = 60  # —Å–µ–∫—É–Ω–¥
    MAX_RETRIES = 3     # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_novel_state(self, user_id: int) -> NovelState | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.session.execute(
            select(NovelState).where(NovelState.user_id == user_id)
        )
        return result.scalar_one_or_none()

    async def create_novel_state(self, user_id: int) -> NovelState | None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            old_state = await self.get_novel_state(user_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ - –∑–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
            if old_state and old_state.needs_payment:
                logger.info(f"Blocked novel creation - payment required for user {user_id}")
                return None
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if old_state:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
                try:
                    if old_state.thread_id:
                        await openai_client.beta.threads.delete(thread_id=old_state.thread_id)
                except Exception as e:
                    logger.error(f"Error deleting thread: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
                    
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                await self.session.delete(old_state)
                await self.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –≤ OpenAI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    thread = await openai_client.beta.threads.create()
                    break
                except Exception as e:
                    if attempt == max_retries - 1:
                        logger.error(f"Failed to create thread after {max_retries} attempts: {e}")
                        raise
                    logger.warning(f"Attempt {attempt + 1} failed: {e}")
                    await asyncio.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            novel_state = NovelState(
                user_id=user_id,
                thread_id=thread.id,
                current_scene=0,
                is_completed=False,
                needs_payment=False
            )
            
            self.session.add(novel_state)
            await self.session.commit()
            await self.session.refresh(novel_state)
            
            return novel_state
            
        except Exception as e:
            logger.error(f"Error creating novel state: {e}")
            await self.session.rollback()
            raise

    async def save_message(self, novel_state: NovelState, content: str, is_user: bool = False) -> NovelMessage:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É"""
        message = NovelMessage(
            novel_state_id=novel_state.id,
            content=content,
            is_user=is_user
        )
        self.session.add(message)
        await self.session.commit()
        return message

    async def get_last_assistant_message(self, novel_state: NovelState) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        result = await self.session.execute(
            select(NovelMessage)
            .where(
                NovelMessage.novel_state_id == novel_state.id,
                ~NovelMessage.is_user
            )
            .order_by(NovelMessage.created_at.desc())
            .limit(1)
        )
        message = result.scalar_one_or_none()
        return message.content if message else None

    async def process_message(self, message: Message, novel_state: NovelState, initial_message: bool = False) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Assistant"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
            if message.text in SKIP_COMMANDS:
                return

            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            clean_text = await extract_images_and_clean_text(message.text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
            response = await self._get_assistant_response(clean_text, novel_state)
            
            if response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ü–µ–Ω—ã
                is_final = any(marker in response.lower() for marker in [
                    "—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞:",
                    "final scene:",
                    "### —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞",
                    "### final scene"
                ])
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                cleaned_response = response
                for marker in [
                    "### –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¶–ï–ù–ê:", 
                    "–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¶–ï–ù–ê:", 
                    "### Final Scene:", 
                    "Final Scene:"
                ]:
                    cleaned_response = cleaned_response.replace(marker, "").strip()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                await message.answer(cleaned_response)
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–æ–≤–µ–ª–ª—É
                if is_final:
                    await logger.ainfo("Final scene detected, ending story")
                    await self.end_story(novel_state, message)
                    return
                    
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            await logger.aerror("Error processing message", error=str(e))
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def end_story(self, novel_state: NovelState, message: Message, silent: bool = False) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–æ–≤–µ–ª–ª—É –∏ –æ—á–∏—â–∞–µ—Ç –¥ÔøΩÔøΩ–Ω–Ω—ã–µ"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –ë–î
            novel_state.needs_payment = True
            novel_state.is_completed = True
            try:
                await self.session.commit()
            except Exception as e:
                logger.error(f"Error saving novel state: {e}")
                raise
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
            if novel_state.thread_id:
                try:
                    await openai_client.beta.threads.delete(thread_id=novel_state.thread_id)
                except Exception as e:
                    logger.error(f"Error deleting OpenAI thread: {e}", 
                               thread_id=novel_state.thread_id)
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞
            
            if not silent:
                await message.answer(
                    "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞'",
                    reply_markup=get_main_menu(has_active_novel=False)
                )
                
        except Exception as e:
            logger.error(f"Error ending story: {e}", exc_info=True)
            if not silent:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
            raise

    async def process_message_openai(self, message: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Assistant"""
        logger = structlog.get_logger()
        
        for attempt in range(self.MAX_RETRIES):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
                await self.client.messages.create(
                    thread_id=self.thread_id,
                    role="user",
                    content=message
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                run = await self.client.runs.create(
                    thread_id=self.thread_id,
                    assistant_id=self.assistant_id
                )
                
                start_time = asyncio.get_event_loop().time()
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                while True:
                    run = await self.client.runs.retrieve(
                        thread_id=self.thread_id,
                        run_id=run.id
                    )
                    
                    if run.status == "completed":
                        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                        messages = await self.client.messages.list(
                            thread_id=self.thread_id
                        )
                        return messages.data[0].content[0].text.value
                        
                    elif run.status == "failed":
                        await logger.aerror(
                            "Assistant run failed",
                            status=run.status,
                            last_error=run.last_error
                        )
                        break
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                    elapsed = asyncio.get_event_loop().time() - start_time
                    if elapsed > self.MAX_WAIT_TIME:
                        await logger.awarning(
                            "Assistant run timeout",
                            attempt=attempt + 1,
                            elapsed_time=elapsed
                        )
                        break
                        
                    await asyncio.sleep(1)
                    
            except Exception as e:
                await logger.aerror(
                    "Error processing message",
                    error=str(e),
                    attempt=attempt + 1
                )
                
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            if attempt == self.MAX_RETRIES - 1:
                raise Exception(
                    f"Assistant run failed after {self.MAX_RETRIES} attempts"
                )
                
            # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        return None
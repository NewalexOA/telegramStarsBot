import asyncio
import structlog
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message
from config_reader import bot_config
import time

from models.novel import NovelState, NovelMessage
from utils.openai_helper import openai_client, send_assistant_response, handle_tool_calls
from keyboards.menu import get_main_menu

logger = structlog.get_logger()

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
SKIP_COMMANDS = {
    "üéÆ –ù–æ–≤–µ–ª–ª–∞", "üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç", 
    "üíù –î–æ–Ω–∞—Ç", "‚ùì –ü–æ–º–æ—â—å", "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É"
}

class NovelService:
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_novel_state(self, user_id: int) -> NovelState | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤–µ–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.session.execute(
            select(NovelState).where(NovelState.user_id == user_id)
        )
        return result.scalar_one_or_none()

    async def create_novel_state(self, user_id: int) -> NovelState | None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–µ–ª–ª—ã"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            old_state = await self.get_novel_state(user_id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ - –∑–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
            if old_state and old_state.needs_payment:
                logger.info(f"Blocked novel creation - payment required for user {user_id}")
                return None
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if old_state:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
                try:
                    if old_state.thread_id:
                        await openai_client.beta.threads.delete(thread_id=old_state.thread_id)
                except Exception as e:
                    logger.error(f"Error deleting thread: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
                    
                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                await self.session.delete(old_state)
                await self.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –≤ OpenAI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    thread = await openai_client.beta.threads.create()
                    break
                except Exception as e:
                    if attempt == max_retries - 1:
                        logger.error(f"Failed to create thread after {max_retries} attempts: {e}")
                        raise
                    logger.warning(f"Attempt {attempt + 1} failed: {e}")
                    await asyncio.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            novel_state = NovelState(
                user_id=user_id,
                thread_id=thread.id,
                current_scene=0,
                is_completed=False,
                needs_payment=False
            )
            
            self.session.add(novel_state)
            await self.session.commit()
            await self.session.refresh(novel_state)
            
            return novel_state
            
        except Exception as e:
            logger.error(f"Error creating novel state: {e}")
            await self.session.rollback()
            raise

    async def save_message(self, novel_state: NovelState, content: str, is_user: bool = False) -> NovelMessage:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É"""
        message = NovelMessage(
            novel_state_id=novel_state.id,
            content=content,
            is_user=is_user
        )
        self.session.add(message)
        await self.session.commit()
        return message

    async def get_last_assistant_message(self, novel_state: NovelState) -> str | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        result = await self.session.execute(
            select(NovelMessage)
            .where(
                NovelMessage.novel_state_id == novel_state.id,
                ~NovelMessage.is_user
            )
            .order_by(NovelMessage.created_at.desc())
            .limit(1)
        )
        message = result.scalar_one_or_none()
        return message.content if message else None

    async def process_message(self, message: Message, novel_state: NovelState, initial_message: bool = False) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not bot_config.assistant_id:
                raise ValueError("Assistant ID is not set")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            try:
                thread = await openai_client.beta.threads.retrieve(thread_id=novel_state.thread_id)
                if not thread:
                    raise Exception("Thread not found")
            except Exception as e:
                logger.error(f"Thread validation failed: {e}")
                thread = await openai_client.beta.threads.create()
                novel_state.thread_id = thread.id
                await self.session.commit()
                logger.info(f"Created new thread: {thread.id}")

            text = message.text
            logger.info(f"Processing message: {text}")

            if initial_message:
                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                await openai_client.beta.threads.messages.create(
                    thread_id=novel_state.thread_id,
                    role="user",
                    content="–ù–∞—á–Ω–∏ —Å —à–∞–≥–∞ '0. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:' –∏ —Å–ø—Ä–æ—Å–∏ –º–æ—ë –∏–º—è."
                )
                logger.info("Sent initial prompt")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.save_message(novel_state, text, is_user=True)
                logger.info("User message saved")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç—Ä–µ–¥–µ
                messages = await openai_client.beta.threads.messages.list(
                    thread_id=novel_state.thread_id
                )
                
                if len(messages.data) == 2:  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç (–∏–º—è)
                    logger.info("Processing name response")
                    character_prompt = f"""–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è —Ñ–æ—Ä–º–∞—Ç—É –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É. 
                    
                    –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–ò–≥—Ä–æ–∫", "–°–∞—à–∞" –∏ –ø–æ–¥–æ–±–Ω—ã–µ –Ω–∞ –∏–º—è –∏–≥—Ä–æ–∫–∞ "{text}". –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ —ç—Ç–æ –∏–º—è.
                    
                    –ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [AI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ: ![–Ω–∞–∑–≤–∞–Ω–∏–µ](—Å—Å—ã–ª–∫–∞)]"""
                    
                    await openai_client.beta.threads.messages.create(
                        thread_id=novel_state.thread_id,
                        role="user",
                        content=character_prompt
                    )
                    logger.info("Sent character introduction prompt")
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await openai_client.beta.threads.messages.create(
                        thread_id=novel_state.thread_id,
                        role="user",
                        content=text
                    )
                    logger.info("Sent regular message")

            max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            attempt = 0
            
            while attempt < max_attempts:
                attempt += 1
                logger.info(f"Attempt {attempt}/{max_attempts} to get assistant response")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç—Ä–µ–¥ —É–¥–∞–ª–µ–Ω
                if not novel_state.thread_id:
                    logger.info("Thread was deleted, stopping message processing")
                    return  # –î–æ–±–∞–≤–ª—è–µ–º return –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                try:
                    run = await openai_client.beta.threads.runs.create(
                        thread_id=novel_state.thread_id,
                        assistant_id=bot_config.assistant_id
                    )
                    logger.info(f"Started run {run.id}")
                except Exception as e:
                    if "No thread found" in str(e):
                        logger.info("Thread was deleted, stopping message processing")
                        return  # –î–æ–±–∞–≤–ª—è–µ–º return –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    raise e

                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                start_time = time.time()
                timeout = 180
                
                while True:
                    if not novel_state.thread_id:
                        logger.info("Thread was deleted during run, stopping processing")
                        return  # –î–æ–±–∞–≤–ª—è–µ–º return –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    
                    try:
                        run = await openai_client.beta.threads.runs.retrieve(
                            thread_id=novel_state.thread_id,
                            run_id=run.id
                        )
                    except Exception as e:
                        if "No thread found" in str(e):
                            logger.info("Thread was deleted, stopping run retrieval")
                            return  # –î–æ–±–∞–≤–ª—è–µ–º return –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        raise e

                    if run.status == "completed":
                        break
                    elif run.status == "requires_action":
                        logger.info(
                            "Run requires action",
                            run_id=run.id,
                            thread_id=novel_state.thread_id
                        )
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º end_story
                        messages = await openai_client.beta.threads.messages.list(
                            thread_id=novel_state.thread_id
                        )
                        if messages.data:
                            assistant_message = messages.data[0].content[0].text.value
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self.save_message(novel_state, assistant_message)
                            await send_assistant_response(message, assistant_message)
                        
                        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool calls
                        await handle_tool_calls(run, novel_state.thread_id, self, novel_state, message)
                        continue
                    elif run.status == "failed":
                        if attempt < max_attempts:
                            logger.warning(f"Assistant run failed on attempt {attempt}, retrying...")
                            await asyncio.sleep(2)
                            break
                        else:
                            raise Exception(f"Assistant run failed after {max_attempts} attempts")
                    elif run.status == "expired":
                        raise Exception("Assistant run expired")
                    elif time.time() - start_time > timeout:
                        raise Exception(f"Assistant run timeout after {timeout} seconds. Last status: {run.status}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    if int(time.time() - start_time) % 10 == 0:
                        logger.info(f"Waiting for assistant response... Status: {run.status}, Time elapsed: {int(time.time() - start_time)}s")
                    
                    await asyncio.sleep(1)
                
                # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫
                if run.status == "completed":
                    break

            duration = time.time() - start_time
            logger.info(f"Run completed in {duration:.2f} seconds")

            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            messages = await openai_client.beta.threads.messages.list(
                thread_id=novel_state.thread_id
            )
            assistant_message = messages.data[0].content[0].text.value
            
            logger.info(f"Raw assistant response:\n{assistant_message}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await self.save_message(novel_state, assistant_message)
            logger.info("Assistant message saved to database")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏)
            await send_assistant_response(message, assistant_message)
            logger.info("Response sent to user")

        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def end_story(self, novel_state: NovelState, message: Message, silent: bool = False) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–æ–≤–µ–ª–ª—É –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            logger.info(
                "Starting story end process",
                user_id=message.from_user.id,
                novel_state_id=novel_state.id,
                thread_id=novel_state.thread_id
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
            logger.info(
                "Setting payment flags",
                user_id=message.from_user.id,
                novel_state_id=novel_state.id
            )
            novel_state.needs_payment = True
            novel_state.is_completed = True
            
            try:
                await self.session.commit()
                logger.info(
                    "Payment flags committed successfully",
                    user_id=message.from_user.id,
                    novel_state_id=novel_state.id,
                    needs_payment=novel_state.needs_payment,
                    is_completed=novel_state.is_completed
                )
            except Exception as e:
                logger.error(
                    "Error committing payment flags",
                    user_id=message.from_user.id,
                    novel_state_id=novel_state.id,
                    error=str(e)
                )
                raise
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
            try:
                logger.info(
                    "Deleting OpenAI thread",
                    user_id=message.from_user.id,
                    thread_id=novel_state.thread_id
                )
                await openai_client.beta.threads.delete(thread_id=novel_state.thread_id)
                logger.info(
                    "OpenAI thread deleted successfully",
                    user_id=message.from_user.id,
                    thread_id=novel_state.thread_id
                )
            except Exception as e:
                logger.error(
                    "Error deleting OpenAI thread",
                    user_id=message.from_user.id,
                    thread_id=novel_state.thread_id,
                    error=str(e)
                )
            
            if not silent:
                logger.info(
                    "Sending completion message",
                    user_id=message.from_user.id
                )
                await message.answer(
                    "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–∂–º–∏—Ç–µ 'üéÆ –ù–æ–≤–µ–ª–ª–∞'",
                    reply_markup=get_main_menu(has_active_novel=False)
                )
                logger.info(
                    "Completion message sent",
                    user_id=message.from_user.id
                )
                
        except Exception as e:
            logger.error(
                "Error ending story",
                user_id=message.from_user.id,
                novel_state_id=novel_state.id if novel_state else None,
                error=str(e)
            )
            if not silent:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")